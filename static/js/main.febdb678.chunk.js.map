{"version":3,"sources":["components/User.tsx","components/Comment.tsx","components/Comments.tsx","components/Post.tsx","components/PostList.tsx","api.ts","App.tsx","index.tsx"],"names":["User","person","username","email","address","className","street","suite","city","zipcode","Comment","comment","body","Comments","comments","map","key","id","Post","post","title","user","PostList","posts","onInputChange","inputValue","htmlFor","type","placeholder","value","onChange","API_URL","getData","url","a","fetch","res","json","data","getUsers","getPosts","getComments","preparedPosts","users","find","userId","filter","App","useState","isLoaded","setLoad","isLoading","setLoading","setPosts","query","setQuery","filteredPosts","toLowerCase","includes","evt","target","onClick","then","newPosts","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.febdb678.chunk.js","sourcesContent":["import React from 'react';\n\ninterface Props {\n  person: User;\n}\n\nexport const User: React.FC<Props> = ({ person }) => {\n  const { username, email, address } = person;\n\n  return (\n    <div>\n      <h3>{`author: ${username}`}</h3>\n      <p>{`email: ${email}`}</p>\n      <div className=\"address\">\n        <p>address:</p>\n        <p>{address.street}</p>\n        <p>{address.suite}</p>\n        <p>{address.city}</p>\n        <p>{address.zipcode}</p>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\n\ninterface Props {\n  comment: Comment;\n}\n\nexport const Comment: React.FC<Props> = ({ comment }) => {\n  return (\n    <p>{comment.body}</p>\n  );\n};\n","import React from 'react';\nimport { Comment } from './Comment';\n\ninterface Props {\n  comments: Comments;\n}\n\nexport const Comments: React.FC<Props> = ({ comments }) => {\n  return (\n    <div className=\"comments\">\n      <p>Comments:</p>\n      {comments.map(comment => (\n        <Comment key={comment.id} comment={comment} />\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport { User } from './User';\nimport { Comments } from './Comments';\n\ninterface Props {\n  post: PreparedPost;\n}\n\nexport const Post: React.FC<Props> = ({ post }) => {\n  return (\n    <div className=\"post\">\n      <h2 className=\"post-title\">{post.title}</h2>\n      <p className=\"post-body\">{post.body}</p>\n      <User person={post.user} />\n      <Comments comments={post.comments} />\n    </div>\n  );\n};\n","import React from 'react';\nimport { Post } from './Post';\n\ninterface Props {\n  posts: PreparedPosts;\n  onInputChange: (evt: React.ChangeEvent<HTMLInputElement>) => void;\n  inputValue: string;\n}\n\nexport const PostList: React.FC<Props> = ({ posts, onInputChange, inputValue }) => {\n  return (\n    <div className=\"post-list\">\n      {/* Добавил htmlFor, потому что линтер ругается */}\n      <label\n        className=\"label\"\n        htmlFor=\"search\"\n      >\n        Search:\n        <input\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search post title or body\"\n          id=\"search\"\n          value={inputValue}\n          onChange={onInputChange}\n        />\n      </label>\n      {posts.map(post => (\n        <Post key={post.id} post={post} />\n      ))}\n    </div>\n  );\n};\n","const API_URL = 'https://jsonplaceholder.typicode.com';\n\nconst getData = async (url: string) => {\n  const res = await fetch(url);\n  const data = await res.json();\n\n  return data;\n};\n\nconst getUsers = async (): Promise<Users> => {\n  return getData(`${API_URL}/users`);\n};\n\nconst getPosts = async (): Promise<Posts> => {\n  return getData(`${API_URL}/posts`);\n};\n\nconst getComments = async (): Promise<Comments> => {\n  return getData(`${API_URL}/comments`);\n};\n\nexport const preparedPosts = async () => {\n  const users: Users = await getUsers();\n  const posts: Posts = await getPosts();\n  const comments: Comments = await getComments();\n\n  return (\n    posts.map(post => ({\n      ...post,\n      user: users.find(user => user.id === post.userId) as User,\n      comments: comments.filter(comment => comment.id === post.id),\n    }))\n  );\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { PostList } from './components/PostList';\nimport { preparedPosts } from './api';\n\nconst App: React.FC = () => {\n  const [isLoaded, setLoad] = useState<boolean>(false);\n  const [isLoading, setLoading] = useState<boolean>(false);\n  const [posts, setPosts] = useState<PreparedPosts>([]);\n  const [query, setQuery] = useState<string>('');\n\n  const handleLoadData = () => {\n    setLoading(true);\n    preparedPosts().then(newPosts => {\n      setPosts(newPosts);\n      setLoad(true);\n      setLoading(false);\n    });\n  };\n\n  const handleChange = (evt: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(evt.target.value);\n  };\n\n  const filteredPosts = posts.filter(post => (\n    post.title.toLowerCase().includes(query.toLowerCase())\n    || post.body.toLowerCase().includes(query.toLowerCase())\n  ));\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"header-text\">Dynamic list of posts</h1>\n      {\n        isLoaded\n          ? (\n            <PostList\n              posts={filteredPosts}\n              onInputChange={handleChange}\n              inputValue={query}\n            />\n          )\n          : (\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={handleLoadData}\n            >\n              {isLoading ? 'Loading...' : 'Load'}\n            </button>\n          )\n      }\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}